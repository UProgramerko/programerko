Očitavanje gumba miša
---------------------

Informacije o trenutačno pritisnutim tipkama miša pruža funkcija ``pg.mouse.get_pressed()``. Ova funkcija vraća n-torku od tri elementa (poredani trostruki) koji se koriste kao logičke vrijednosti. Elementi n-torke odgovaraju lijevoj, srednjoj i desnoj tipki miša. Vrijednost *True* označava da je tipka trenutno pritisnuta, a *False* da nije.

Primjer u nastavku pokazuje kako čitati kada su tipke miša pritisnu. To je dio programa u kojem se to događa:

.. activecode:: PyGame__interact_put_ball_into_box_part
    :passivecode: true

    pressed_mouse_button = pg.mouse.get_pressed()

    if pressed_mouse_button[2]: # desna tipka - nova igra
        (x, y) = (width//2, height//2) # vratimo lopticu na centar
        won, lost = False, False # igrac nije podijedio ni izgubio
        
    if pressed_mouse_button[0]: # lijeva tipka - pomakni lopticu
        (xm, ym) = pg.mouse.get_pos() # koordinate pozicije miša
        # loptica se pomice od misa za jos pola tog rastojanja
        x = x - 0.5 * (xm - x)
        y = y - 0.5 * (ym - y)

N-torka *pressed_mouse_button* dobiva tri vrijednosti koje vraća funkcija *pg.mouse.get_pressed()*. Te vrijednosti obično koristimo u *if* naredbama. Na primjer, *if pressed_mouse_button[2]* means "ako se pritisne desni gumb" (0 za lijevo, 1 za sredinu i 2 za desno).

Primjeri i zadaci
'''''''''''''''''

.. questionnote::

    **Primjer - ubaci lopticu:** 
    
    Dok se lijeva tipka miša drži pritisnuta, lopta se odmiče od miša. Cilj je pomicanje miša i pritiskivanjem lijeve tipke postići da loptica bude u crvenom okviru. Pritiskom na desnu tipku igra se vraća na početak.
    
Prvo pažljivo proučite funkciju *new_frame()*, a zatim pogledajte i ostale dijelove koda. Isprobajte program i provjerite radi li onako kako ste očekivali nakon što ste pročitali opis.
    
.. activecode:: PyGame__interact_put_ball_into_box
    :nocodelens:
    :enablecopy:
    :modaloutput:
    :includesrc: src/PyGame/3_Interaction/3b_Mouse_readkey/put_ball_into_box.py    



.. questionnote::

    **Zadatak - od i do miša:** 
    
    Dovršite program tako da radi kao što je prikazano u primjeru (gumb "Play task").
    
    - Kada pritisnete lijevu tipku miša, lopta se treba udaljiti od miša, kao u gornjem primjeru "stavi loptu u kutiju", ali ne na pola udaljenosti, već samo za desetinu udaljenosti od miša.
    - Kad se ne pritisne lijeva tipka miša, lopta bi se trebala približiti jednoj desetini udaljenosti mišu (kao u zadatku "prema mišu").
    
.. activecode:: PyGame__interact_to_and_from_mouse
    :nocodelens:
    :modaloutput:
    :playtask:
    :includehsrc: src/PyGame/3_Interaction/3b_Mouse_readkey/to_and_from_mouse.py
    
    import pygame as pg, pygamebg
    (width, height) = (400, 400)
    canvas = pygamebg.open_window(width, height, "Ball following the mouse")

    (x, y) = (width // 2, height // 2) # loptica krece iz centra

    def new_frame():
        global x, y
        
        # DODAJTE DIO KOJI NEDOSTAJE
        
        # nacrtati zelenu lopticu na bijeloj pozdaini
        canvas.fill(pg.Color("white")) 
        pg.draw.circle(canvas, pg.Color("green"), (int(x), int(y)), 10)

    pygamebg.frame_loop(50, new_frame)


.. questionnote::

    **Zadatak - laser:** 
    
    Dovršite program tako da radi kao što je prikazano u primjeru (gumb "Play task").
    
    Dok se pritisne lijeva tipka miša, "laser" je uključen, inače je isključen. Dok je laser uključen, njegova energija se smanjuje za 1 (ali ne ispod 0), a kad je isključen, energija se povećava za 2 (ali ne preko 100).
    

.. activecode:: PyGame__interact_laser
    :nocodelens:
    :modaloutput:
    :playtask:
    :includehsrc: src/PyGame/3_Interaction/3b_Mouse_readkey/laser.py

    import pygame as pg, pygamebg
    width, height = 400, 400
    canvas = pygamebg.open_window(width, height, "Laser")

    laser_on = False
    energy = 25 # koliko je laser pun od 0 do 100

    def draw():
        canvas.fill(pg.Color("black")) # pozdaina
        
        # indikator pokazuje koliko je laser pun
        pg.draw.rect(canvas, pg.Color("green"), (10, 10, 100, 10), 1)
        pg.draw.rect(canvas, pg.Color("green"), (10, 10, energy, 10))
        
        if laser_on:
            reach = (4 * energy, height - 4 * energy)
            pg.draw.line(canvas, pg.Color("red"), (0, height), reach, 5)
        
    def new_frame():
        global energy, laser_on
        
        # OCITAJTE STANJE LIJEVe TIPKE MISA I POSTAVITE VRIJEDNOSTI
        # GLOBALNIH VARIJABLI energy, laser_on

        draw()

    pygamebg.frame_loop(15, new_frame)


.. commented out

    .. questionnote::

        **Zadatak - boja pozadine:** Ovaj jednostavan primjer samo ilustrira čitanje stanja gumba miša. Dok se pritisne lijeva tipka, pozadina postaje svjetlija, a dok se desna tipka pritiska, pozadina postaje tamnija.
        

    .. activecode:: PyGame__interact_bg_color
        :nocodelens:
        :modaloutput:
        :includesrc: src/PyGame/3_Interaction/3b_Mouse_readkey/bg_color.py

