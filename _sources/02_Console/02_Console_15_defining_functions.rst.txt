Definiranje funkcija
====================

U dijelu posvećenom upravljanju Karelom spomenuli smo da skupinu naredbi možemo izdvojiti u zasebnu cjelinu koja se zove funkcija. Prisjetimo se kako izgleda funkcija napisana na Pythonu:

.. activecode:: Console__functions__function_def
    :passivecode: true

    def function_name(argument_list):
        naredba_1
        ...
        naredba_k
        
Za pisanje funkcija na Pythonu vrijede sljedeća pravila:

.. infonote::

    **Pravila pisanja funkcija:**

    - Definicija funkcije započinje riječju ``def``, nakon čega slijedi naziv funkcije, zatim lista argumenata u zagradama i znak ``:`` (dvotočka) na kraju reda.
    - Bilo koje pravilno napisano ime može se pojaviti kao *function_name* (pravila su ista kao i za imena varijabli).
    - Prazna lisat (ništa) može se pojaviti kao *argument_list* ako funkcija ne koristi argumente, ili jedan ili više argumenata odvojenih zarezima.
    - Bilo koja Python naredba može se pojaviti u tijelu funkcije (*naredba_1*, ... *naredba_k*). Ove naredbe pišu se u uvučeno s obzirom na red koji sadrži naziv funkcije i argumente.

Funkcije mogu, a i ne moraju vratiti neku vrijednost. Do sada smo imali priliku vidjeti obje vrste funkcija. Na primjer, funkcije pomoću kojih se Karel (robot) kreće naprijed, okreće se, podiže i ostavlja lopticee sve su funkcije koje ne vraćaju nikakvu vrijednost. S druge strane, matematičke funkcije poput *abs* ili *round*, kao i funkcije provjere ima li Karel loptice sa sobom, ima li loptice na polju ili može li Karel ići naprijed, funkcije su koje vraćaju vrijednost.

Pisanje funkcija koje vraćaju vrijednost
----------------------------------------

Da bi funkcija vratila vrijednost, Da bi funkcija vratila vrijednost, potrebno je da se u tijelu funkcije barem jednom navede ``return`` naredba. Naredba ``return`` se sastoji od riječi *return*, iza koje slijedi izraz čiju vrijednost funkcija treba vratiti. 

.. activecode:: console__functions_return_example

    def square(x):
        return x * x
    
    print(square(3))

Naredba *return* može se pojaviti na više mjesta u funkciji (obično s različitim vrijednostima), i mora biti navedena na kraju tijela funkcije. Funkcija *abs*, da nije ugrađena, mogla bi se definirati na sljedeći način:

.. activecode:: console__functions_def_abs
    :passivecode: true

    def abs(x):
        if x > 0:
            return x
        else:
            return -x
    
Funkcija može vratiti više od jedne vrijednosti. Jedna takva ugrađena funkcija je *divmod*, koja vraća dva broja - rezultat cjelobrojnog djeljenja i ostatka. Funkciju  *divmod* koristimo kao što to radimo s funkcijama koje vraćaju jednu vrijednost, vraćene vrijednosti postavljamo samo u više varijabli:

.. activecode:: console__functions_divmod_example

    quotient, reminder = divmod(813, 10)
    print('Količnik je', quotient, 'a ostatak', reminder)
    

Kad pišemo funkcije koje vraćaju više vrijednosti, dovoljno je odrediti vrijednosti odvojene zarezima nakon riječi *return*. Ako bismo sami definirali ugrađenu funkciju *divmod*, mogli bismo je napisati ovako:

.. activecode:: console__functions_divmod_def
    :passivecode: true

    def divmod(a, b):
        return a // b, a % b

Primjeri
''''''''

.. questionnote::

    **Primjer - farbanje:** 
    
    Za farbanje :math:`1m^{2}` zidova zahtijeva oko :math:`0.5kg` boje. Napišite funkciju koja prihvaća sljedeća 4 argumenta:
    
    - duljina sobe
    - širina sobe
    - visina sobe
    - duljina koja se ne farba (ukupna širina vrata, prozora, ormara, itd.)

    Funkcija bi trebala vratiti količinu boje (u kilogramima) potrebnu za bojanje zidova i stropova.
    
    Nakon funkcije napišite program koji učitava podatke za 5 različitih prostorija, a zatim pomoću napisane funkcije izračunava i ispisuje ukupnu količinu boje potrebnu za bojanje svih pet soba.

.. activecode:: console__functions_paint2


    def paint_needed(a, b, h, not_to_paint):
        coverage = 0.5 # koliko kilograma za kvadratni metar
        ceiling = a*b
        walls = h * (2*a + 2*b - not_to_paint)
        area_to_paint  = ceiling + walls
        return area_to_paint * coverage
        
    total_paint_needed = 0
    for i in range(5):
        s = input('Unesite dužinu, širinu i visinu sobe, i dužinu koja se ne farba').split()
        total_paint_needed += paint_needed(float(s[0]), float(s[1]), float(s[2]), float(s[3]))

    print("Potrebno je ukupno", total_paint_needed, "kilograma boje")  


Zadaci za vježbu:
'''''''''''''''''

.. questionnote::

    **Zadatak - geografske koordinate u GPS formatu**

    Pronašli ste staru kartu zakopanog blaga i pročitali koordinate blaga u stupnjevima, minutama i sekundama. Međutim, vaš GPS uređaj podržava samo geografske koordinate u stupnjevima kao realni brojevi.
    
    Napišite program koji za datu koordinatu u stupnjevima, minutama i sekundama ispisuje realan broj stupnjeva.

Program je gotovo u potpunosti napisan. Za izračun realnog broja stupnjeva treba dodati izraz. Da biste pretvorili (kutne) minute u stupnjeve, podijelimo ih sa :math:`60`, a sekunde pretvaramo u stupnjeve dijeleći na :math:`60 \cdot 60 = 3600`.

.. activecode:: console__functions_GPS_1

   degrees = int(input())
   minutes = int(input())
   seconds = int(input())
   
   def deg_min_sec_to_degrees(deg, min, sec):
        # dovršite funkciju
   
   float_degrees = deg_min_sec_to_degrees(degrees, minutes, seconds)
   print(float_degrees)



.. questionnote::

    **Zadatak - Geografske koordinate u formatu za staru kartu**
    
    Nakon što ste shvatili da je stara karta iz prethodnog zadatka šala, odlučili ste nekome prirediti sličnu šalu. Odabrali ste lokaciju u blizini i čitali koordinate s vašeg GPS uređaja. Sada morate pretvoriti koordinate s uređaja u stvarnim stupnjevima u cijele stupnjeve, minute i sekunde, kako biste stvorili odgovarajuću "staru" kartu.
    
     Dovršite pokrenuti program koji izvodi ovu pretvorbu.

.. activecode:: console__functions_GPS_2

    def deg_min_sec(real_degrees):
        # dopunite funkciju tako sto cete izracunati tri vrijednosti
        # koje funkcija vraca (i nakon toga uklonite komentar is sljedece linije koda)
        # return whole_degrees, whole_minutes, whole_seconds

    real_degrees = float(input())
    whole_deg, whole_min, whole_sec = deg_min_sec(real_degrees)
    print(whole_deg, whole_min, whole_sec)



.. questionnote::

    **Zadatak - Vodoinstalater:** 
    
    Mike je vodoinstalater i za danas su planirane tri intervencije. Za svaku intervenciju Mike će bilježiti kada je započeo i kada završio. Na temelju tih podataka trebalo bi izračunati koliko je Mike proveo na intervencijama.
    
    Djelomično je napisan program koji učitava početno i završno vrijeme u satima i minutama za svaku Mikeovu intervenciju, a zatim određuje i ispisuje ukupno trajanje svih intervencija.
    
    **Dovršite program** tako što ćete napisati funkciju *duration(h1, m1, h2, m2)*, koja izračunava koliko minuta je proteklo od *h1* sati i *m1* minuta do *h2* sati i *m2* minuta.
    
.. activecode:: console__functions_plumber

    # napišite duration funkciju

    def process_one_intervention():
        prompt = "Unesite sat i minutu početka i sat i minutu završetka intervencije "
        s1, s2, s3, s4 = input(prompt).split()
        h1, m1, h2, m2 = int(s1), int(s2), int(s3), int(s4)
        return duration(h1, m1, h2, m2)
        
    t1 = process_one_intervention()
    t2 = process_one_intervention()
    t3 = process_one_intervention()
    total_minutes = t1 + t2 + t3
    num_hours = total_minutes // 60
    num_minutes = total_minutes % 60
    print("Intervencije su trajale ukupno", num_hours, "sati i", num_minutes, ",imuta")


Funkcije koje ne vraćaju vrijednost
-----------------------------------

Funkcije koje ne vraćaju vrijednost samo rade neke zadatke, a mi ih koristimo kao naredbe. Takve su bile, na primjer, funkcije *back()* ili *take_at_neighboring_square()*, koje smo pisali u lekciji posvećenom Karelu. Pogledajmo primjer takve funkcije u programu s tekstualnim sučeljem.

.. questionnote::

    **Primjer - prijevoz:** 
    
    Članovima četveročlane obitelji potrebno je 55, 35, 40 i 20 minuta minuta da stignu kući s mjesta na kojem su se nalazili, pod uvjetom da krenu kući prije 16 sati. U suprotnom im treba 15 minuta više.
    
    Napišite program koji učitava vrijeme odlaska u satima i minutama za svakog člana obitelji i navedite vrijeme dolaska kući.
    
Funkcija *process_family_member* obavlja sve potrebne radnje za jednog člana obitelji: učitava vrijeme odlaska, a na temelju vremena odlaska, ako je potrebno, produžuje trajanje putovanja, zatim izračunava i ispisuje vrijeme dolaska kući. U glavnom programu ova se funkcija samo poziva za svakog člana obitelji.

.. activecode:: console__functions_transport

    def process_family_member(which_one, travel_duration):
        prompt = 'Unesite sat i minutu polaska ' + which_one + ' člana obitelji'
        s_hour, s_min = input(prompt).split()
        departure_hour, departure_minute = int(s_hour), int(s_min)
        if departure_hour >= 16:
            travel_duration += 15
        arrival_total_minutes = departure_hour * 60 + departure_minute + travel_duration
        arrival_hour = arrival_total_minutes // 60
        arrival_minute = arrival_total_minutes % 60
        print('Vrijeme odlaska', which_one, "člana kući je", arrival_hour, "sati i", arrival_minute, "minuta.")
        
    process_family_member("first", 55)
    process_family_member("second", 35)
    process_family_member("third", 40)
    process_family_member("fourth", 20)


Zadaci za vježbu:
'''''''''''''''''

.. questionnote::

    **Zadatak - popust:** 
    
    Jedan proizvođač nudi robu po cijeni od 10 eura po komadu, a za narudžbe od 50 ili više komada odobrava se 10% popusta. Nekoliko kupaca najavilo je da dolaze kupiti određeni broj komada. Nazivi kupaca i tražene količine daju se na početku programa.
    
    Napišite funkciju koja za dano ime kupca i količinu robe ispisuje koliko taj kupac treba platiti.

Ime kupca se prosljeđuje na funkciju ovdje samo radi ispisa. Cijena robe izračunava se na temelju količine koja se kao drugi argument prebacuje na funkciju.

.. activecode:: console__functions_discount

    # definirajte funkciju print_price

    customers = ('Oliver', 'Freddie', 'Sophia', 'Lucas')
    quantities = (70, 28, 150, 6)
    n = len(customers)
    for i in range(n):
        print_price(customers[i], quantities[i])


.. questionnote::

    **Zadatak - podvlačenje teksta:**

    Napišite funkciju *underline(text)*,koja prikazuje zadani tekst podcrtanim.
    
**Pomoć:** Funkcija *underline* trebala bi se sastojati od samo *print* naredbe. Prva izjava treba ispisati zadani tekst, a u drugoj linija. String koji sadrži liniju možete dobiti množenjem stringa ``'-'`` s duljinom datog stringa.

.. activecode:: console__functions_underlined_text

    # napišite funkciju 'underline'
    
    underline("Iz Celzijusa u Fahrenheit:")
    for c in range(15, 46, 5):
        print(c, '°C =', round(c * 9 / 5 + 32, 1), '°F.')
    print()
    
    underline("Iz Fahrenheit u Celzijuse:")
    for f in range(50, 111, 10):
        print(f, '°F =', round((f-32) * 5 / 9, 1), '°C.')

.. commented out

    def underline(text):
        print(text)
        print('-' * len(text))

~~~~

Za kraj, spomenimo neke od prednosti pisanja funkcija koje, zbog kratkoće naših primjera i zadataka, nisu mogle doći do izražaja:

- Funkcije u dugim programima često se koriste za rasterećivanje glavnog dijela programa i za njegovo kraće i lakše razumijevanje. Naši programi nisu tako dugi da bi ih bilo potrebno raterećivati, ali pokazuju kako se to moglo učiniti s duljim programima.
- Funkcije nam mogu pomoći izbjeći ponavljanje istog ili sličnog koda u programima. Ponavljanje koda treba izbjegavati jer je takav kod teže održavati - svaka promjena treba biti izvršena na više mjesta, što je zamorno i podložno greškama i propustima.
- Kad pišemo funkcije, omogućujemo drugima lakše korištenje dijelova našeg koda. Funkcije koje pišemo mogu se izdvojiti u poseban modul koji drugi ljudi lako mogu uključiti u svoje programe.
- Za vrlo velike programe, oblikovanje funkcija omogućuje razdvajanje programa u više datoteka umjesto jedne ogromne i nerazumljive datoteke.

