Matematičke funkcije
====================

U programiranju stalno koristimo funkcije. Na primjer, *print()*, *input()*, *int()*, *float()* i *str()* su funkcije programskog jezika Python, koje smo do sada već koristili. U Pythonu postoje puno drugih funkcija, a među njima i veliki broj onih koje se koriste u matematici. U nastavku ćemo vidjeti neke od jednostavnijih matematičkih funkcija.

Funkcije *abs()*, *min()* i *max()*
-----------------------------------

Funkcije *abs()*, *min()* i *max()* se često koriste u računalnim zadacima. Vjeraojatno ste ih negdje već koristili, pa ćemo ih samo ukratko objasniti:

- funkcija *abs()* vraća apsolutnu vrijednost numeričkog izraza koji joj se prosljeđuje kao argument (apsolutna vrijednost broja se dobiva kada se odbaci znak broja, videti primjer ispod);
- funkcija *min()* može imati dva ili više numeričkih argumenata i vraća vrijednost najmanjeg od njih;
- the *max()* može imati dva ili više numeričkih argumenata i vraća vrijednost najvećeg od njih;

Evo kako koristiti ove funkcije u programu:

.. activecode:: console__numberfunc_absminmax_example

    print("abs(3) =", abs(3))
    print("abs(-7) =", abs(-7))
    print("abs(-5 - -2) =", abs(-5 - -2))
    print("min(5, 2, 7, 3) =", min(5, 2, 7, 3))
    print("max(5, 2, 7, 3) =", max(5, 2, 7, 3))

Funkcije *abs()*, *min()* and *max()* - pitanja
-----------------------------------------------

Provjerite svoje razumijevanje gore:

.. mchoice:: console__numberfunc_min
   :answer_a: 10
   :answer_b: 20
   :answer_c: 30
   :correct: a
   :feedback_a: Točno!
   :feedback_b: Funkcija min vraća najmanju od vrijednosti koje joj se proslijede kao argumenti.
   :feedback_c: Funkcija min vraća najmanju od vrijednosti koje joj se proslijede kao argumenti.
		
   Koja je vrijednost izraza ``min(10, 20, 30)``?

.. mchoice:: console__numberfunc_max
   :answer_a: 10
   :answer_b: 20
   :answer_c: 30
   :correct: c
   :feedback_a: Funkcija max vraća najveću od vrijednosti koje joj se proslijede kao argumenti.
   :feedback_b: Funkcija max vraća najveću od vrijednosti koje joj se proslijede kao argumenti.
   :feedback_c: Točno!
		
   Koja je vrijednost izraza ``max(10, 20, 30)``?

.. dragndrop:: console__numberfunc_max_0x100
    :feedback: Pokušaj ponovo!
    :match_1: vrijednost izraza je 0 ||| ako je x manje od nule
    :match_2: vrijednost izraza je x ||| ako je x između 0 i 100
    :match_3: vrijednost izraza je 100 ||| ako je x veće od 100
    
    Usporedite vrijednost izrara ``min(100, max(0, x))`` s uvjetima za x.

.. dragndrop:: console__numberfunc_max_0x
    :feedback: Pokušaj ponovo!
    :match_1: abs(x)||| x ako je x pozitivno, a suprotan broj inače
    :match_2: max(0, x)||| x ako je x pozitivno, a nula inače
    :match_3: min(0, x)||| x ako je x negativno, a nula inače
    :match_4: min(0, abs(x))||| uvijek nula
		
    Usporedite izraze s njihovim vrijednostima.

Funkcije zaokruživanja vrijednosti
----------------------------------

Zaokruživanje stvarne vrijednosti na cijeli broj je operacija koja nam je također često potrebna. Već smo vidjeli da pretvaranjem realnog broja u cijeli broj zaokružujemo na nulu. Postoji još nekoliko funkcija koje pomoću Pythona možemo upotrijebiti za zaokruživanje realnog broja na različite načine:

- funkcija *round()* vraća cijeli broj najbliži argumentu (vrsta rezultata je int);
- funkcija *floor()* vraća najbliži cijeli broj, manji ili jednak vrijednosti argumenta (tip rezultata je float);
- function *ceil()* vraća najbliži cijeli broj veći ili jednak vrijednosti argumenta (tip rezultata je float);

Pokrenite sljedeći program da biste vidjeli kako ove funkcije funkcioniraju i usporedite ih.

.. activecode:: console__numberfunc_rounding_example

    import math
    
    print("round(56.234) =", round(56.234))
    print("round(56.789) =", round(56.789))

    print("math.floor(56.234) =", math.floor(56.234))
    print("math.floor(56.789) =", math.floor(56.789))

    print("math.ceil(56.234) =", math.ceil(56.234))
    print("math.ceil(56.789) =", math.ceil(56.789))


Primjetite da su funkcije *floor* i *ceil* nešto drugačije od *round* funkcije i svih dosadašnjih funkcija - to kaže `` math.`` ispred njihovog imena u programu. To je zato što su ove funkcije definirane u modulu koji se zove *math*. Moduli su programske cijeline koji sadrže različite funkcije, konstante i druge dijelove koda koje možemo koristiti u našim programima. Tako i modul *math* osim funkcija *floor* i *ceil* sadrži i druge funkcije. Na primjer, poznata konstanta pi može se koristiti kao *math.pi*, a funkcionalni kvadratni korijen kao *math.sqrt* (ovdje ih nećemo koristiti).

Da bismo koristili funkcije *math* modula, taj modul moramo priključiti našem programu. To smo učinili pisajući ``import math`` na početku programa. To nam, naravno, To nam, naravno, omogućava korištenje svih ostalih matematičkih funkcija i svega ostalog definiranog u ovom modulu.

Za *round* funkciju i sve prethodne funkcije nije potreban poseban modul, jer su ove funkcije ugrađene u sam Python, tako da su nam uvijek dostupne.

Funkcije zaokruživanja vrijednosti - Pitanja
--------------------------------------------

Provijerite svoje razumijevanje funkcija koje su objašnjene u ovoj lekciji:

.. mchoice:: console__numberfunc_abs_round
   :answer_a: -2
   :answer_b: 2
   :answer_c: -3
   :answer_d: 3
   :correct: d
   :feedback_a: Pročitajte ponovo objašnjenja funkcija abs i round.
   :feedback_b: Funkcija round vraća najbliži cijeli broj.
   :feedback_c: Funkcija abs vraća apsolutnu vrijednost broja, koja je uvijek veća ili jednaka nuli.
   :feedback_d: Točno!
		
   Koja je vrijednost izraza ``abs(round(-2.7))``?
   
.. mchoice:: console__numberfunc_max_abs
   :answer_a: max(x, round(x))
   :answer_b: max(x)
   :answer_c: round(x)
   :answer_d: abs(x)
   :correct: a
   :feedback_a: Točno!
   :feedback_b: Funkcija max treba imati bar dva argumenta.
   :feedback_c: Na ovaj način iznos se može i smanjiti.
   :feedback_d: Iznos je već pozitivan, funkcijom abs se ovdje ništa ne postiže.
		
   Jedan blagajnik zaokružuje račun na najbliži cijeli broj samo ako se time povećava iznos, u suprotnom prijavljuje iznos kakav jest. Koju formulu primjenjuje ovaj blagajnik (x je početna vrijednost računa)?

.. dragndrop:: console__numberfunc_rounding
    :feedback: Pokušaj ponovo!
    :match_1: prema nuli|||int()
    :match_2: prema bližem cijelom broju|||round()
    :match_3: prema manjem cijelom broju|||floor()
    :match_4: prema većem cijelom broju|||ceil()

    Usporedite funkcije zaokruživanja s načinom zaokruživanja.

.. questionnote::

    **Zadatak za znatiželjne** - funkcija *round*
    
    Funkcija *round* može se pozvati i s dva argumenta (mi je inače nećemo tako koristiti), gdje je drugi argument obično mali cijeli broj. Primjerice, provjerite vrijednosti :math:`round(123.23456, 2)`, :math:`round(123.23456, 3)` i :math:`round(123.23456, -1)`. Prostor ispod možete koristiti za brzo isprobavanje stvari.
    
    Pokušajte objasniti čemu služi drugi argument funkcije *round*, kada se funkcija pozove s dva argumenta.
    
.. activecode:: console__givenfunc_round

