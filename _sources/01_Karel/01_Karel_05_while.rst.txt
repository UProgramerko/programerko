Riješite više zadataka odjednom 
===============================

Sudeći prema programima koje smo do sada vidjeli, moglo bi se pomisliti da za svaki, čak i malo drugačiji zadatak, treba napisati poseban program. Kada bi to bilo tako, programiranje bi bilo vrlo, vrlo naporan posao.

Da bi program koji napišemo mogao da se primjeni na grupu sličnih zadataka, potrebno nam je da se u različitim situacijama izvršavaju različite naredbe. To znači da nam je potreban način da program shvati trenutnu situaciju, a zatim odabere koje će naredbe izvršiti, ovisno o stuaciji. Situacija se može odnositi na broj loptica koje se nalaze na nekom polju ili kod Karela, na položaj zidova oko Karela i slično. Program koji bi mogao dobiti odgovore na pitanja o Karelu i njegovoj okolini, mogao bi i rešavati više sličnih zadataka, odnosno jedan opći zadatak.

Pitanja o Karelu
----------------

Na početku uvodnog poglavlja smo vidjeli naredbe Karelu, pomoću kojih mu zadajemo da izvršava neke radnje (ide naprijed, okreće se lijevo i desno, pokupi i spusti loptice). Tada smo spomenuli da postoji još pet funkcija u vezi sa Karelom. Ovih pet funkcija su drukčije od prethodnih po tome što pomoću njih postavljamo neka pitanja o Karelu ili o polju na kome se on nalazi i dobijamo odgovor. Evo tih funkcija:

- ``front_is_clear()`` - pitamo može li Karel ići naprijed (postoje li zidovi ispred njega). Dobivamo odgovor "da" ili "ne".
- ``num_balls_on_square()`` - pitamo koliko je loptica na polju na kojem je Karel. Dobivamo broj loptica na polju.
- ``is_ball_on_square()`` - pitamo postoji li barem jedna loptica na Karelovom polju. Dobivamo odgovor "da" ili "ne".
- ``num_balls_with_karel()`` - pitamo koliko loptica Karel trenutno ima sa sobom. Dobivamo broj loptica koje Karel drži.
- ``any_balls_with_karel()`` - pitamo ima li Karel loptica kod sebe. Dobivamo odovor „da” ili „ne”.

Ove funkcije davanja odgovora ne možemo napisati kao zasebne naredbe, kao što smo to radili do sada. Umjesto toga, ove funkcije pišemo kao dio nekih Python naredbi. Pogledajmo primjere.

Sve doke je potrebno (*while* naredba)
--------------------------------------

Jedan od načina za korištenje funkcija koje daju odgovor je njihovo pisanje u ``while`` naredbi. Naredba while postoji u gotovo svim programskim jezicima i napisana je vrlo slično na različitim jezicima. U Python-u izgleda ovako:

.. activecode:: while_syntax
   :passivecode: true

   while condition:
       naredba_1
       ...
       naredba_k

.. infonote::

    Značenje ``while`` naredbe je: sve dok je ``uvjet`` ispunjen, izvršite naredbu ili naredbe koje su napisane ispod uvučeno (while na engleskom znači „dok” ili „dok je”). Riječ ``uvjet`` iznad znači sve što je ispravno napisano na Pythonu, a svodi se na **da** ili **ne** (tehnički izraz za "bilo što" je **logički izraz**).

    Pravila pisanja *while* naredbe zahtjevaju pisanje dvotočke ``:`` nakon uvjeta. Nakon uvjeta (i dvotočke). Naredbe koje se ponavljaju dok je taj uvjet ispunjen (dok je odgovor na pitanje u uvjetu **da**, odnosno **točno**) čine tijelo while naredbe i pišu se u slijedećim redovima malo desno (uvučeno) u odnosu na while naredbu. To znači da se ispred svake od naredbi koje se ponavljaju dodaje isti broj razmaka.

Uvjet se provjerava prije svakog izvršavanja naredbe u tijelu while naredbe. Prvi put kada uvjet ne bude ispunjen, kompletna naredba while (zajedno sa naredbama u svom tijelu) se završava i prelazi se na naredbu koja je navedena ispod tijela while naredbe. Na primer, ako izvršimo:

.. activecode:: while_example
   :passivecode: true

   while front_is_clear():
       move()
   pick_ball()

Karel će se kretati naprijed koliko može, to jest dok ne dobijemo odgovor "ne" na pitanje front_is_clear(), što znači da je Karel naišao na zid. Kada završi s kretanjem, Karel će pokupiti lopticu. U slučaju da je Karel već ispred zida, naredba move() se uopće neće izvršiti i Karel će odmah uzeti lopticu.

~~~~

U primjerima i zadacima koji slijede zadatak će biti općenit. To znači da će pri različitim pokretanjima programa zadatak izgledati slično, ali malo drugačije. Program treba napisati tako da riješava svaki od tih sličnih zadataka.

Idi do kraja i pokupi lopticu
'''''''''''''''''''''''''''''

.. questionnote::

   Ispred Karela je jedno ili više polja, a na posljednjem polju je jedna loptica. Napišite program na osnovu kojega će Karel pokupiti lopticu sa posljednjeg polja.
    
   **Program treba pokrenuti više puta**, jer će pri različitim pokretanjima Karelov svijet imati različiti broj polja. Evo nekoliko primjera kako zadatak može izgledati:
     
   .. image:: ../../_images/Karel/While_01.jpg
      :width: 600px   
      :align: center

Koristit ćemo while naredbu za pokretanje Karela, a nakon toga, mu reći da pokupi lopticu.

.. karel:: Karel_while__many_squares_and_ball_at_the_end
   :blockly:

   {
      setup:function() {
         function random(n) {
            return Math.floor(n * Math.random());
         }

         var N = 2 + random(14);
         var world = new World(N, 1);
         world.setRobotStartAvenue(1);
         world.setRobotStartStreet(1);
         world.setRobotStartDirection("E");
         world.putBall(N, 1);
      
         var robot = new Robot();
      
         var code = ["from karel import *",
                     "while front_is_clear():",
                     "    move()",
                     "pick_ball()"];
         return {robot:robot, world:world, code:code};
      },
      
      isSuccess: function(robot, world) {
         return robot.getBalls() === 1;
      }
   }

.. infonote::
    
    Može se dogoditi da program često daje dobar rezultat, povremeno daje loš rezultat ili se prekida zbog pogreške. Takav program treba smatrati neispravnim. Ispravan program uvijek treba dati točan rezultat.

Zadaci za vježbu
------------------

Idi jedno polje naprijed i pokupi sve loptice
'''''''''''''''''''''''''''''''''''''''''''''

.. questionnote::

  Ispred Karela se nalazi točno jedno polje, a na tom polju se nalazi bilo koji broj loptica. Karl ih treba pokupiti.
  
Slijedeći upute u donjem programu, Karel će pokušati beskonačno ponavljati naredbu ``pick_ball()``, jer je uvjet u ``while`` naredbi uvijek ispunjen (``True`` što znači "Točno"). Međutim, kada Karel uzme sve loptice s tog polja, dobit ćemo poruku o pogrešci, jer smo tražili da se uzme loptica s praznog polja (slobodno isprobajte ovo i vidite kako izgleda poruka o pogrešci). Pokušajte popraviti program, tako da Karel uzima loptice samo dok ih ima.

.. karel:: Karel_while__one_square_many_balls
   :blockly:

   {
        setup:function() {
           function random(n) {
              return Math.floor(n * Math.random());
           }
           
           var world = new World(2, 1);
           world.setRobotStartAvenue(1);
           world.setRobotStartStreet(1);
           world.setRobotStartDirection("E");
           
           var N = random(14);
           world.putBalls(2, 1, N);

           var robot = new Robot();

           var code = ["from karel import *",
                       "move()",
                       "while True: # umjesto True koristite funkciju is_ball_on_square()",
                       "    pick_ball()",
                       ""];
           return {robot:robot, world:world, code:code};
        },
    
        isSuccess: function(robot, world) {
           var N = world.getAvenues();
           for (var k = 1; k <= N; k++)
              if (world.getBalls(k, 1) > 0)
                 return false;
               
           return true;
        },
   }

.. commented out
   .. reveal:: Karel_while__one_square_many_balls_reveal
      :showtitle: Rješenje
      :hidetitle: Sakrij rješenje
   
      .. activecode:: Karel_while__one_square_many_balls_solution
         :passivecode: true
         
         from karel import *
         move()
         while is_ball_on_square():
             pick_ball()

Idi koliko možeš i pokupi jednu lopticu na svakom polju
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. questionnote::

   Ispred Karela je jedno ili više polja, a na svakom polju po jedna loptica. Napišite program na osnovu kojeg će Karel pokupiti loptice sa svih polja.
   
   **Pokrenite ovaj program nekoliko puta** kako biste bili sigurni da riješava zadatk bez obzira na dužinu Karelove staze.
   
Trebate koristiti jednu *while* naredbu za kretanje Karela i da pokupi lopticu.

.. karel:: Karel_while__many_squares_and_ball_at_each
   :blockly:

   {
      setup:function() {
         function random(n) {
            return Math.floor(n * Math.random());
         }

         var N = 2 + random(8);
         var world = new World(N, 1);
         world.setRobotStartAvenue(1);
         world.setRobotStartStreet(1);
         world.setRobotStartDirection("E");
         for (var k = 2; k <= N; k++)
             world.putBall(k, 1);

         var robot = new Robot();
      
         var code = ["from karel import *",
                     "# dovrši program",
                     ];
         return {robot:robot, world:world, code:code};
      },
      
      isSuccess: function(robot, world) {
         return (robot.getBalls() == world.getAvenues() - 1);
      }
   }

Premjesti sve loptice s posljednjeg na prvo polje
''''''''''''''''''''''''''''''''''''''''''''''''''''

.. questionnote::

   Ispred Karela se nalazi jedno ili više polja, a na zadnjem polju se nalazi nekoliko loptica. Karel bi trebao pokupiti sve loptice sa zadnjeg polja i donijeti na prvo polje.
   
   (Pokrenite program nekoliko puta.)
   
U ovom zadatku su potrebne četiri petlje jedna za drugom (ne jedna u drugoj):

- U prvoj petlji, Karel stiže na zadnje polje
- U drugoj petlji, Karel pokupi loptice
- U trećoj petlji, Karel se vraća na početno polje
- U zadnjoj petlji, Karl ostavlja sve loptice koje ima kod sebe

Naravno, polije prve ili druge petlje, Karel se treba okrenuti prema početnom polju (dva puta u lijevo ili dva puta u desno).

.. karel:: Karel_while__bring_balls_to_front_square
    :blockly:

    {
        setup:function() {
            function random(n) {
                return Math.floor(n * Math.random());
            }

            var N = 2 + random(5);
            var world = new World(N, 1);
            world.setRobotStartAvenue(1);
            world.setRobotStartStreet(1);
            world.setRobotStartDirection("E");
            world.putBalls(N, 1, 2 + random(4));

            var robot = new Robot();
      
            var code = ["from karel import *",
                        "# idi do kraja",
                        "# pokupi sve loptice",
                        "turn_right()",
                        "turn_right()",
                        "# idi do kraja",
                        "# ostavi sve loptice",
                       ];
            return {robot:robot, world:world, code:code};
        },
      
        isSuccess: function(robot, world) {
            var N = world.getAvenues();
            for (var k = 2; k <= N; k++) {
                if (world.getBalls(k, 1) > 0)
                    return false;
            }
            if (robot.getBalls() > 0)
                return false;

            return true;
        }
    }
    
.. commented out
   .. reveal:: Karel_while__bring_balls_to_front_square_reveal
       :showtitle: Rješenje
       :hidetitle: Sakrij rješenje
   
       .. activecode:: Karel_while__bring_balls_to_front_square_solution
           :passivecode: true
         
           from karel import *
           while front_is_clear():
               move()
           while is_ball_on_square():
               pick_ball()
           turn_right()
           turn_right()
           while front_is_clear():
               move()
           while any_balls_with_karel():
               drop_ball()

Prebaci loptice u gornji red
''''''''''''''''''''''''''''

.. questionnote::

  Karelov se svijet ovaj put sastoji iz dva reda iste, ali nepoznate dužine. Karel je u donjem lijevom kutu, okrenut prema istoku. Sva polja gornjeg reda su prazna, a svako polje prvog reda sadrži jednu lopticu, uključujući i polje na kojem je Karel. Karelov zadatak je staviti jednu lopticu na svako polje gornjeg reda.
  
  (Pokrenite program nekoliko puta.)
  
.. karel:: Karel_while__put_balls_in_upper_row
   :blockly:

   {
      setup:function() {
         function random(n) {
            return Math.floor(n * Math.random());
         }

         var N = 2 + random(4);
         var world = new World(N, 2);
         world.setRobotStartAvenue(1);
         world.setRobotStartStreet(1);
         world.setRobotStartDirection("E");
         for (var k = 1; k <= N; k++)
             world.putBall(k, 1);

         var robot = new Robot();
      
         var code = ["from karel import *",
                     "# dovrši program",
                     ];
         return {robot:robot, world:world, code:code};
      },
      
      isSuccess: function(robot, world) {
          var N = world.getAvenues();
          for (var k = 1; k <= N; k++) {
              if (world.getBalls(k, 1) > 0)
                  return false;
              if (world.getBalls(k, 2) != 1)
                  return false;
          }
          if (robot.getBalls() > 0)
              return false;

          return true;
      }
   }

.. reveal:: Karel_while__put_balls_in_upper_row_reveal
    :showtitle: Pomoć
    :hidetitle: Sakrij pomoć
    
    Dajemo upute koje nalikuju na program:

    .. activecode:: Karel_while__put_balls_in_upper_row_solution
        :passivecode: true
        
        pick up the ball
        while you can go forward:
            go forward
            pick up the ball
        turn towards the top row
        get in the top row
        turn towards the beginning of the row
        drop the ball
        while you can go forward:
            go forward
            drop the ball

.. commented out
    .. reveal:: Karel_while__put_balls_in_upper_row_reveal
        :showtitle: Rješenje
        :hidetitle: Sakrij rješenje

        .. activecode:: Karel_while__put_balls_in_upper_row_solution
            :passivecode: true
          
            from karel import *
            pick_ball()
            while front_is_clear():
                move()
                pick_ball()
            turn_left()
            move()
            turn_left()
            drop_ball()
            while front_is_clear():
                move()
                drop_ball()
