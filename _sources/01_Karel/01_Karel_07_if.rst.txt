Provjerite i odlučite
=====================

Naredba *while* se pokazala kao vrlo korisna, jer smo upotrebljavajući ju mogli rešiti raznolike zadatke. Međutim, sljedeći primjer pokazuje da postoje jednostavni zadaci koje ne možemo riješiti s onim što smo do sada naučili.

Recimo da u određenoj situaciji morate preseliti Karela samo za jedno polje ako je moguće (ako nije moguće, Karel bi trebao ostati tamo gdje jest).

- Ako napišemo samo naredbu *move()*, riskiramo poruku o pogrešci u slučaju da je Karel ispred zida.
- Ako naredbu *move()* smjestimo ispod *while front_is_clear():* naredbe, riskiramo da Karel ode dalje nego što smo željeli.
- Ako ne koristimo naredbu *move()*, rikiramo da se ne pomaknemo čak i kad je moguće (i potrebno).

Očito, potrebna nam je nova izjava koja će Karelu reći "ako možeš ići naprijed, pomakni se za jedno mjesto".

Naredba *If* 
--------------

Naredba koja nam je potrebna u opisanom slučaju je ``if`` naredba, koja također postoji u skoro svim programskim jezicima. Na Pythonu se ona (u svom jednostavnijem obliku) piše ovako:

.. activecode:: Karel_if__syntax
   :passivecode: true

   if condition:
       naredba_1
       ...
       naredba_k


.. infonote::

   Vidimo da je pisanje naredbe ``if`` vrlo slično pisanju *while* statement. Pod ``if`` naredbom možemo staviti jednu ili više drugih naredbi, koje čine **tijelo if naredbe**. Ista pravila vrijede i za pisanje dvotočke ``:`` nakon uvjeta i uvlačenje naredbi koje se izvršavaju ako je uvjet ispunjen. Razlika je u tome što se naredbe u tijelu *if* naredbe neće ponavljati - ako je uvjet ispunjen, izvršit će se samo jednom.

   Naredba ``if`` se zove i *naredba grananja* zato što se tok izvršavanja programa kod ove naredbe grana: sljedeća naredba koja će se izvršiti zavisi od odgovora na pitanje iz uvjeta.

U gornjem primjeru trebali bismo napisati:

.. activecode:: Karel_if__example
   :passivecode: true

   if front_is_clear():
       move()


Pogledajmo neke zadatke u kojima se (osim već poznatih naredbi) koristi i ``if`` naredba.

Pokupi jednu lopticu ako ih ima
'''''''''''''''''''''''''''''''

.. questionnote::

   Ispred Karela se nalazi jedno polje, na kojem se nalazi nula i više loptica. Napišite program na osnovu kojeg će se Karel pomaknuti na polje, i zatim uzet točno jednu lopticu ako na polju ima barem jedna loptica.
   
   Pokrenite program nekoliko puta kako biste ga testirali na različitim primjerima..

U našem slučaju, uvjet će biti ``is_ball_on_square()``, a naredba koja se uvjetno izvršava je ``pick_ball()``.

.. karel:: Karel_if__take_one_if_any
   :blockly:

   {
      setup:function() {
          var world = new World(2, 1);
          world.setRobotStartAvenue(1);
          world.setRobotStartStreet(1);
          world.setRobotStartDirection("E");
          if (Math.random() > 0.5)
             world.putBalls(2, 1, 1 + Math.floor(7 *  Math.random()));
      
      var robot = new Robot();
      
      var code = ["from karel import *",
                  "move()",
                  "if ...         # dovrši program",
                  "    pick_ball()",
                  ""];
          return {robot:robot, world:world, code:code};
      },
      
      isSuccess: function(robot, world) {
         return world.getBalls(1, 1) === 0 &&
            (robot.getBalls() === 1 ||
            (robot.getBalls() === 0 && world.getBalls(2, 1) === 0));
      }
   }

.. commented out
   .. reveal:: Karel_if__take_one_if_any_reveal
       :showtitle: Rješenje
       :hidetitle: Sakrij rješenje
       
       Solution:
   
       .. activecode:: Karel_if__take_one_if_any_solution
           :passivecode: true
         
           from karel import *
           move()
           if is_ball_on_square():
               pick_ball()


Idi do kraja staze i odaberite jednu loptu gdje je to moguće
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. questionnote::

  Ispred Karela nalazi se barem jedano ili više polja. Svako polje ima nula ili više loptica. Karel bi trebao pokupiti točno jednu lopticu iz svakog polja na kojem se nalazi loptica.
  
  Pokrenite program nekoliko puta kako biste ga testirali na različitim primjerima.

Ovdje je potrebno koristiti *while* naredbu za kretanje prema naprijed, i u tijeli *while* petlje, nakon svakog koraka naprijed, treba koristiti *if* naredba za provjeru stoji li Karel na polju sa lopticom.

.. karel:: Karel_if__many_squares_take_one_if_any
   :blockly:

   {
      setup:function() {
         function random(n) {
            return Math.floor(n * Math.random());
         }

         var N = 2 + random(8);
         var world = new World(N, 1);
         world.setRobotStartAvenue(1);
         world.setRobotStartStreet(1);
         world.setRobotStartDirection("E");
          for (var k = 2; k <= N; k++)
             if (Math.random() > 0.5)
                world.putBalls(k, 1, 2 + random(3)); // need initial world to replace '2'->'1'
      
         var robot = new Robot();
      
         var code = ["from karel import *",
                     "while front_is_clear():",
                     "    move()",
                     "    if ... # nadopunite",
                     "       ... # nadopunite naredbe",
                     ""];
                     
         return {robot:robot, world:world, code:code};
      },
      
      isSuccess: function(robot, world) {
         var N = world.getAvenues();
         var nonEmpty = 0;
         for (var k = 1; k <= N; k++)
            if (world.getBalls(k, 1) > 0)
               nonEmpty++;
               
         return robot.getBalls() === nonEmpty;
      }
   }

.. commented out
   .. reveal:: Karel_if__many_squares_take_one_if_any_reveal
       :showtitle: Rješenje
       :hidetitle: Sakrij rješenje
       
       Solution:
   
       .. activecode:: Karel_if__many_squares_take_one_if_any_solution
           :passivecode: true
         
           from karel import *
           while front_is_clear():
               move()
               if is_ball_on_square():
                   pick_ball()


Ako to ne radiš, napravi ovo (if-else)
--------------------------------------

U nekim zadacima jedna stvar treba biti učinjena ako je ispunjen određeni uvjet, a neka druga ako nije ispunjena. U tom slučaju možemo koristiti prošireni oblik naredbe *if*, koja izgleda ovako: 

.. activecode:: Karel_if__else_syntax
    :passivecode: true

    if condition:
        naredba_a1
        ...
        naredba_ak
    else:
        naredba_b1
        ...
        naredba_bm


.. infonote::

   U proširenom obliku ``if`` naredbe, prvi dio (do riječi `else`) ima isti izgled i značenje kao do sad. U nastavku se piše riječ ``else``, jednako uvučena kao i riječ `if``, zatim se piše dvotočka ``:``. Ispod slijedi jedna ili više drugih naredbi, koje čine **tijelo else grane**. Ova druga grupa naredbi se piše uvučeno u odnosu na riječ *else*, a izvršava se ako uvjet naveden u `` if`` naredbi nije ispunjen.

Primjer - uzimanje i ispuštanje loptica
'''''''''''''''''''''''''''''''''''''''

.. questionnote::

   Ispred Karela su 3 polja, a na svakom od njih može biti po jedna ili nijedna loptica. Karel treba uzeti loptice s onih polja na kojima se nalaze i postaviti ih na ona polja na kojima se ne nalaze. Karel na početku ima dovoljno loptica kod sebe.

Pomoću novog, proširenog oblika ``if`` naredbe, možemo reći Karelu: "Ako je na polju loptica, onda uzmi tu lopticu, inače ostavi jednu lopticu", tako da zadatak možete lako riješiti:

.. karel:: Karel_if__take_else_put
    :blockly:
   
    {
      setup: function() {
       var world = new World(4, 1);
           world.setRobotStartAvenue(1);
           world.setRobotStartStreet(1);
           world.setRobotStartDirection("E");
       world.balls = [];
       for (var k = 2; k <= world.getAvenues(); k++) {
          var ball = Math.random() > 0.5;
          world.balls.push(ball);
          if (ball)
                  world.putBall(k, 1);
           }
           var robot = new Robot();
       robot.setInfiniteBalls(true);
       var code = ["from karel import *",
        "for i in range(3):",
        "    move()",
        "    if is_ball_on_square():",
        "        pick_ball()",
        "    else:",
        "        drop_ball()"
       ]
       return {world: world, robot: robot, code: code};
      },

      isSuccess: function(robot, world) {
       for (var k = 2; k <= world.getAvenues(); k++)
              if (world.getBalls(k, 1) == world.balls[k-2])
             return false;
       return true;
      }
    }


Pokupi loptice do kojih možeš doći
''''''''''''''''''''''''''''''''''


.. questionnote::

   Labirint se sastoji od dva reda. Karel se nalazi u gornjem redu, koji je prohodan do kraja. U donjem redu se nalaze prepreke ili polja s jednom lopticom. Karelov zadatak je pokupti sve loptice.
   
.. karel:: Karel_if__take_all_from_lower_row
    :blockly:
   
    {
      setup: function() {

         function random(n) {
             return Math.floor(n * Math.random());
         }

         var world = new World(4 + random(4), 2);
         world.setRobotStartAvenue(1);
         world.setRobotStartStreet(2);
         world.setRobotStartDirection("E");

         world.addEWWall(1, 1, 1);
         var balls = 0;
         var prevBall = false;
         for (var i = 2; i <= world.getAvenues(); i++) {
             if (random(2) == 0 || (balls == 0 && i == world.getAvenues() - 1)) {
                 balls++;
                 if (!prevBall)
                    world.addNSWall(i-1, 1, 1);
                 world.putBall(i, 1);
                 prevBall = true;
             } else {
                 if (prevBall)
                    world.addNSWall(i-1, 1, 1);
                 world.addEWWall(i, 1, 1);
                 prevBall = false;
             }
         }

         var robot = new Robot();
         var code = ["from karel import *",
            "while front_is_clear():",
            "    move() # sljedeće polje",
            "",
            "    # provjeri donji red",
            "    turn_right()           # okreni se prema jugu",
            "    if front_is_clear():   # ako postoji polje u donjem redu",
            "        # reci Karelu da ode po lopticu, pokupi je ",
            "        # da se vrati na sadasnje polje i okrene se prema istoku",
            "    # recite Karelu, ako nije mogao preci na donji red",
            "    # da se ponovno okrene prema istoku zbog nastavka",
         ]
         return {world: world, robot: robot, code: code};
      },

      isSuccess: function(robot, world) {
           for (var i = 1; i <= world.getAvenues(); i++)
              for (var j = 1; j <= world.getStreets(); j++)
                 if (world.getBalls(i, j) != 0)
                    return false;
          return true;
      }
    }
   
.. commented out
   .. reveal:: Karel_if__take_all_from_lower_row_reveal
       :showtitle: Rješenje
       :hidetitle: Sakrij rješenje
   
       One possible solution (not the only one) is the following:
   
       .. activecode:: Karel_if__take_all_from_lower_row_solution
           :passivecode: true
                       
           from karel import *
           while front_is_clear():
               move() # sljedeće polje
               
               # provjeri donji red
               turn_right()  # kreni se prema jugu
               if front_is_clear(): # ako postoji polje u donjem redu
                   move(); pick_ball() # reci Karelu da ode po lopticu, pokupi je
                   
                   # da se vrati na sadasnje polje i okrene se prema istoku
                   turn_left(); turn_left()
                   move(); turn_right() 
               else:
                   turn_left() # okreni se prema istoku


Radi samo kada nešto nije ispunjeno
-----------------------------------

Nekada je potrebno da se Karel okrene lijevo ako **ne može** ići naprijed (ako može ići naprijed, ne treba raditi ništa).

Prema pravilima *if* naredbe, poslije uvjeta (u tijelu prve grane) mora postojati bar jedna naredba, a prema logici zadatka nam nije potrebna niti jedna naredba na tome mjestu. U takvim situacijama možemo pisati:

.. activecode:: Karel_if__else_only
    :passivecode: true

    if front_is_clear():
        pass
    else:
        turn_left()

ili

.. activecode:: Karel_if__not
    :passivecode: true

    if not front_is_clear():
        turn_left()

U prvom slučaju koristimo specijalnu naredbu ``pass`` koja ne radi ništa. Time je zadovoljena sintaksa (pravila pisanja), a dobili smo i program koji radi kako želimo.

U drugom slučaju, pomoću riječi ``not``, pravimo suprotni uvjet, što znači da je uvjet *if* naredbe ispunjen kada Karel ne može ići naprijed. U ovom slučaju grane mjenjaju uloge i onda nam *else* grana više nije potrebna.

U nekoliko sljedećih zadataka nešto je potrebno učiniti samo kad uvjet nije ispunjen.

Okreni se prema praznom polju
'''''''''''''''''''''''''''''


.. questionnote::

   Karel može budti okrenut na bilo koju stranu, ali samo u jednom smjeru može započeti kretanje. Potrebno je da se Karel okrene prema slobodnom polju i napravi jedan korak.
   
.. karel:: Karel_if__turn_to_free_square
   :blockly:

   {
      setup:function() {
         function random(n) {
            return Math.floor(n * Math.random());
         }
         
         var ww = [
            [
               '█████',
               '█N.0█',
               '█████'
            ],
            [
               '█████',
               '█S.0█',
               '█████'
            ],
            [
               '█████',
               '█E.0█',
               '█████'
            ],
            [
               '█████',
               '█W.0█',
               '█████'
            ],
            [
               '███',
               '█0█',
               '█.█',
               '█E█',
               '███'
            ],
            [
               '███',
               '█0█',
               '█.█',
               '█W█',
               '███'
            ],
            [
               '███',
               '█0█',
               '█.█',
               '█S█',
               '███'
            ],
            [
               '███',
               '█0█',
               '█.█',
               '█N█',
               '███'
            ],
            [
               '███████',
               '█0.0.N█',
               '███████'
            ],
            [
               '███████',
               '█0.0.S█',
               '███████'
            ],
            [
               '███████',
               '█0.0.W█',
               '███████'
            ],
            [
               '███████',
               '█0.0.E█',
               '███████'
            ],
            [
               '█████',
               '█0█N█',
               '█.█.█',
               '█0.0█',
               '█████'
            ],
            [
               '█████',
               '█0█S█',
               '█.█.█',
               '█0.0█',
               '█████'
            ],
            [
               '█████',
               '█0█W█',
               '█.█.█',
               '█0.0█',
               '█████'
            ],
            [
               '█████',
               '█0█E█',
               '█.█.█',
               '█0.0█',
               '█████'
            ]
         ];
         let choice = random(ww.length);
         var w = ww[choice];
         var ny = Math.floor(w.length / 2);
         var nx = Math.floor(w[0].length / 2);
         var world = new World(nx, ny);
         
         for (let y = 1; y <= ny; y++) {
            let wy = 2*(ny-y) + 1;
            for (let x = 1; x <= nx; x++) {
               let wx = 2*x - 1;
               if (y < ny && w[wy - 1].charAt(wx) == "█") world.addEWWall(x, y, 1);
               if (x < nx && w[wy].charAt(wx + 1) == "█") world.addNSWall(x, y, 1);
               let c = w[wy].charAt(wx);
               let pos = "SWEN".indexOf(c);
               if (pos > -1) {
                  world.setRobotStartAvenue(x);
                  world.setRobotStartStreet(y);
                  world.setRobotStartDirection("SWEN".charAt(pos));
               }
               let d = w[wy].charCodeAt(wx);
               if (d >= 48 && d < 58) world.putBalls(x, y, d - 48);
            }
         }
         
         var robot = new Robot();
         
         var code = ["from karel import *",
                     "# dovršite program",
                     ""];
                     
         return {robot:robot, world:world, code:code};
      },
      
      isSuccess: function(robot, world) {
         var X = world.getAvenues();
         var Y = world.getStreets();
         if (X == 2 && Y == 1) return robot.getAvenue() == 2 && robot.getStreet() == 1 && robot.getDirection() == "E";
         if (X == 1 && Y == 2) return robot.getAvenue() == 1 && robot.getStreet() == 2 && robot.getDirection() == "N";
         if (X == 3 && Y == 1) return robot.getAvenue() == 2 && robot.getStreet() == 1 && robot.getDirection() == "W";
         if (X == 2 && Y == 2) return robot.getAvenue() == 2 && robot.getStreet() == 1 && robot.getDirection() == "S";
         return false;
      }
   }

.. reveal:: Karel_if__turn_to_free_square_reveal
    :showtitle: Rješenje
    :hidetitle: Sakrij rješenje

    Nudimo vam dva kratka rješenja:
   
    .. activecode:: Karel_if__turn_to_free_square_solution1
        :passivecode: true
      
        from karel import *
        while not front_is_clear():
            turn_left()
        move()

    .. activecode:: Karel_if__turn_to_free_square_solution2
        :passivecode: true
      
        from karel import *
        for i in range(3):
            if not front_is_clear():
                turn_left()
        move()
                
Tamo gdje nema loptica, dodajte ih
''''''''''''''''''''''''''''''''''

.. questionnote::

   Ispred Karela je nepoznat broj polja, a na svakom od njih može biti po jedna ili ni jedna loptica. Karel ima dovoljno loptica kod sebe, a treba staviti po jednu lopticu na svako polje na kojem nema loptice.
   
.. karel:: Karel_if__fill_the_empty_squares
    :blockly:
   
    {
        setup: function() {
            function random(n) {
                return Math.floor(n * Math.random());
            }
            var N = 2 + random(5);
            var world = new World(N, 1);
            world.setRobotStartAvenue(1);
            world.setRobotStartStreet(1);
            world.setRobotStartDirection("E");
            world.balls = [];
            world.putBall(1, 1);
            for (var k = 2; k <= world.getAvenues(); k++) {
                var ball = Math.random() > 0.5;
                world.balls.push(ball);
                if (ball)
                    world.putBall(k, 1);
            }
            var robot = new Robot();
            robot.setInfiniteBalls(true);
            var code = ["from karel import *",
                        "# dovršite program"
                        ]
            return {world: world, robot: robot, code: code};
        },

        isSuccess: function(robot, world) {
            for (var k = 1; k <= world.getAvenues(); k++)
                if (world.getBalls(k, 1) != 1)
                    return false;
            return true;
        }
    }
